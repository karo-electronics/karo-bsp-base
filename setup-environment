#!/bin/sh
# -*- mode: shell-script; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2012, 2013, 2016 O.S. Systems Software LTDA.
# Authored-by:  Otavio Salvador <otavio@ossystems.com.br>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Add options for the script
# Copyright (C) 2013 Freescale Semiconductor, Inc.
CWD=`pwd`
PROGNAME=setup-environment

if [ -z "$BASH_VERSION" ];then
    echo "This script must to be run from bash" >&2
    return 1
fi

usage()
{
    echo -e "\nUsage: source $PROGNAME <build-dir>
    <build-dir>: specifies the build directory location (required)

If undefined, this script will set \$MACHINE to 'imx6q-tx6-emmc'.
"

    shopt -q nullglob && nullglob=false || nullglob=true
    $nullglob && shopt -s nullglob
    for s in sources/*/conf/machine/*.conf;do
        echo -e "
Supported machines: `echo; ls sources/*/conf/machine/*.conf | \
sed 's/^.*\//\t/;s/\.conf//'`

Supported distros: `echo; grep -h '^DISTRO_NAME ' sources/*/conf/distro/*.conf | \
sed 's/^.*= "/\t/;s/"//'`

To build for a machine listed above, run this script as:
DISTRO=<distro> MACHINE=<machine> source $PROGNAME <build-dir>
"
        $nullglob && shopt -u nullglob
        return
    done
	cat << EOF
No machine configuration files found!
Make sure, to set up your yocto source directory with:
    repo init -u git@github.com:karo-electronics/karo-manifest -b master
    repo sync
EOF
    $nullglob && shopt -u nullglob
}

clean_up()
{
   unset LIST_MACHINES VALID_MACHINE
   unset CWD TEMPLATES SHORTOPTS LONGOPTS ARGS PROGNAME
   unset generated_config updated
   unset MACHINE SDKMACHINE DISTRO OEROOT
}

# get command line options
SHORTOPTS="h"
LONGOPTS="help"

ARGS=$(getopt --options $SHORTOPTS  \
  --longoptions $LONGOPTS --name $PROGNAME -- "$@" )
# Print the usage menu if invalid options are specified
if [ $? != 0 -o $# -lt 1 ]; then
   usage && clean_up
   return 1
fi

eval set -- "$ARGS"
while true;do
    case $1 in
        -h|--help)
           usage
           clean_up
           return 0
           ;;
        --)
           shift
           break
           ;;
    esac
done

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use yocto as root! Exiting..."
    return 1
fi

if [ -z "$MACHINE" ]; then
    MACHINE='imx6q-tx6-emmc'
fi

# Check the machine type specified
LIST_MACHINES=`ls -1 $CWD/sources/*/conf/machine`
VALID_MACHINE=`echo -e "$LIST_MACHINES" | grep ${MACHINE}.conf$ | wc -l`
if [ "$MACHINE" = "" ] || [ "$VALID_MACHINE" = "0" ]; then
    echo -e "\nThe \$MACHINE you have specified ($MACHINE) is not supported by this build setup"
    usage && clean_up
    return 1
else
    if [ ! -e $1/conf/local.conf.sample ]; then
        echo "Configuring for ${MACHINE}"
    fi
fi

if [ -z "$SDKMACHINE" ]; then
    SDKMACHINE=`uname -m`
fi

if [ -z "$DISTRO" ]; then
    case $MACHINE in
        imx*-tx*)
            DISTRO="karo-minimal"
            DEV_MANAGER="busybox-mdev"
            bitbake_target=karo-image-minimal
            ;;
        tx*)
            DISTRO="poky"
            bitbake_target=u-boot
            ;;
        *)
            echo "Internal error: Unsupported \$MACHINE: '$MACHINE'"
            clean_up
            return 1
    esac
else
    case $DISTRO in
        karo-minimal)
            bitbake_target="karo-image-minimal"
            DEV_MANAGER="busybox-mdev"
            ;;
        karo-base|karo-x11)
            bitbake_target="karo-image${DISTRO#karo}"
            DEV_MANAGER="udev"
            ;;
        uboot|u-boot|u-boot-karo)
            bitbake_target="u-boot-karo"
            DISTRO="poky"
            ;;
        *)
            echo "Unsupported distro: '$DISTRO'" >&2
            usage && clean_up
            return 1
            ;;
    esac
fi

OEROOT=$PWD/sources/poky
if [ -e $PWD/sources/oe-core ]; then
    OEROOT=$PWD/sources/oe-core
fi
TEMPLATECONF=${TEMPLATECONF:-$PWD/sources/meta-karo-distro/conf}

# Ensure all files in sources/base are kept in sync with project root
updated=false
shopt -q nullglob && nullglob=false || nullglob=true
$nullglob && shopt -s nullglob
for f in "$CWD/sources/base/"*; do
    file="$(basename $f)"
    if [ "$file" = "conf" ] || echo "$file" | grep -q '~$'; then
        continue
    fi

    if ! cmp -s "$file" "$f"; then
        updated=true
        [ -e "$file" ] && chmod u+w "$file"
        cp "$f" "$file"
    fi
done
$nullglob && shopt -u nullglob
if $updated; then
    echo "The project root content has been updated. Please run '$PROGNAME' again."
    return
fi

. $OEROOT/oe-init-build-env $CWD/$1 > /dev/null

# if conf/local.conf not generated, no need to go further
if [ ! -e conf/local.conf ]; then
    clean_up && return 1
fi

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="`echo $PATH | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//'`"

generated_config=
if [ ! -e conf/local.conf.sample ]; then
    mv conf/local.conf conf/local.conf.sample

    # Generate the local.conf based on the Yocto defaults
    TEMPLATES=$CWD/sources/base/conf 
    grep -v '^#\|^$' conf/local.conf.sample > conf/local.conf
#    if [ -n "$DEV_MANAGER" ];then
#        echo "VIRTUAL-RUNTIME_dev_manager = \"$DEV_MANAGER\"" >> conf/local.conf
#    fi
    if [ "$DISTRO" = "karo-minimal" ];then
        echo 'EXTRA_IMAGE_FEATURES += "read-only-rootfs"' >> conf/local.conf
    fi
    # Change settings according environment
    sed -e "s,MACHINE ??=.*,MACHINE ??= '$MACHINE',g" \
        -e "s,SDKMACHINE ??=.*,SDKMACHINE ??= '$SDKMACHINE',g" \
        -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" \
        -e "s,POKY_DISTRO ?=.*,POKY_DISTRO ?= '$POKY_DISTRO',g" \
        -i conf/local.conf

    cp $TEMPLATES/* conf/

    for s in $HOME/.oe $HOME/.yocto; do
        if [ -e $s/site.conf ]; then
            echo "Linking $s/site.conf to conf/site.conf"
            ln -s $s/site.conf conf
        fi
    done

    generated_config=1
fi

cat <<EOF

Welcome to Ka-Ro electronics TX module BSP

The Yocto Project has extensive documentation about OE including a
reference manual which can be found at:
    https://yoctoproject.org/documentation

For more information about OpenEmbedded see their website:
    https://www.openembedded.org/

For a Ka-Ro specific Yocto guide please refer to:
    "Getting Started" > "Yocto Guide" in the respective TX module page on
    https://www.karo-electronics.com

You can start your build now with 'bitbake $bitbake_target'

EOF

if [ -n "$generated_config" ]; then
    cat <<EOF
Your build environment has been configured with:

    MACHINE=$MACHINE
    SDKMACHINE=$SDKMACHINE
    DISTRO=$DISTRO
EOF
else
    echo "Your configuration files at $1 have not been touched."
fi

clean_up
